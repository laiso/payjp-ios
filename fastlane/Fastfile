# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require '../podspec'

default_platform(:ios)

platform :ios do

  desc "Run carthage bootstrap"
  lane :carthage_bootstrap do
    sh('cd ../ && ./scripts/carthage-build.sh bootstrap --platform iOS --cache-builds')
  end

  desc "Run test"
  lane :test do
    scan(
      scheme: 'PAYJP',
      device: 'iPhone 11 Pro',
      configuration: 'Debug',
      skip_slack: true
    )
  end

  desc "Lint podspec"
  lane :lint_podspec do
    sh('pod lib lint ../PAYJP.podspec')
    sh('pod lib lint ../PAYJPFlutterCore.podspec')
    pod_version = PAYJPSDK::VERSION
    info_version = get_version_number
    unless pod_version == info_version then
      UI.user_error! "Version mismatch between podspec (#{pod_version}) and info.plist (#{info_version})."
    end
  end

  desc "Bump up next version"
  lane :bump_up_version do |options|
    current = get_version_number
    new_version = options[:version] || prompt(text: "enter next version(current is #{current}):")
    increment_version_number(version_number: new_version)
    # Update constant in swift
    file_swift = '../Sources/Core/PAYJPSDK.swift'
    new_version_line_swift = "public static let sdkVersion: String = \"#{new_version}\""
    regex_swift = 'public static let sdkVersion: String = .*'
    sh("sed -i '' -e 's/#{regex_swift}/#{new_version_line_swift}/g' #{file_swift}")
    # Update constant in podspec
    file_podspec = '../podspec.rb'
    new_version_line_podspec = "VERSION = '#{new_version}'"
    regex_podspec = 'VERSION = .*'
    sh("sed -i '' -e \"s/#{regex_podspec}/#{new_version_line_podspec}/g\" #{file_podspec}")
    
  end
  
  desc "Create GitHub PR to `payjp/payjp-ios` from internal repo. (internal only)"
  lane :create_pr_to_public do
    public_repo = 'payjp/payjp-ios'
    last_commit_hash = last_git_commit[:abbreviated_commit_hash]
    new_branch = "internal/#{last_commit_hash}"

    sh("git remote add public git@github.com:#{public_repo}.git")
    sh('git fetch public master')
    diff_files = sh('git diff --name-only HEAD..public/master').split
    if diff_files.empty?
      UI.message "No updates found."
    else
      sh("git checkout -b #{new_branch}")
      push_to_git_remote(
        remote: 'public',
        remote_branch: new_branch
      )

      pr_url = create_pull_request(
        repo: public_repo,
        base: 'master',
        title: "internal update:#{last_commit_hash}",
        api_token: ENV['GITHUB_API_TOKEN']
      )

      slack(
        message: ":rocket: PR is created! Please fill in the blank PR description:information_desk_person:\n#{pr_url}",
        success: true
      )
    end
  end

  desc "Check Swift format with swiftLint"
  lane :check_swift_format do
    Dir.chdir('..') do
      sh('scripts/run-swift-format.sh')
    end
    modified_files = sh('git status --porcelain').split
    unless modified_files.empty?
      UI.user_error! "Some diffs have generated after Swift format."
    end
  end

  desc "Check Objective-C format with clang-format"
  lane :check_objc_format do
    sh('../scripts/run-clang-format.sh')
    modified_files = sh('git status --porcelain').split
    unless modified_files.empty?
      UI.user_error! "Some diffs have generated after Objective-C format."
    end
  end

  desc "Create PR to update docs"
  lane :create_pr_to_update_docs do
    jazzy
    diff_files = sh("git diff --name-only").split
    unless diff_files.any? { |file| file.start_with? "docs/" }
      UI.message "No updates in docs."
    else
      last_commit_hash = last_git_commit[:abbreviated_commit_hash]
      new_branch = "docs/update_docs_#{last_commit_hash}"
      sh("git checkout -b #{new_branch}")

      sh('git config --global user.email "misc@pay.jp"')
      sh('git config --global user.name "pay kun"')
      git_add
      git_commit(
        path: "./docs/*",
        message: "update docs."
      )

      push_to_git_remote(
        remote: 'origin',
        local_branch: new_branch,
        remote_branch: new_branch
      )

      pr_url = create_pull_request(
        repo: 'payjp/payjp-ios',
        base: 'master',
        title: "update docs:#{last_commit_hash}",
        api_token: ENV['GITHUB_API_TOKEN']
      )
    end
  end

  desc "Distribute sample app with Firebase App Distribution"
  lane :distribute_sample_app do
    sample_xcproj = "example-objc/example-objc.xcodeproj"
    keychain_pw = ENV["KEYCHAIN_PASSWORD"]
    create_keychain(
      name: ENV["KEYCHAIN_NAME"],
      password: keychain_pw,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
    # import Certificate and Profile
    sh("#{ENV["REPOSITORY_ROOT"]}/scripts/restore_signing_credential.sh")
    import_certificate(
      keychain_name: ENV["KEYCHAIN_NAME"],
      certificate_path: ENV["ENTERPRISE_P12_FILE"],
      certificate_password: ENV["INHOUSE_KEY_PASSWORD"],
      keychain_password: keychain_pw
    )
    install_provisioning_profile(path: ENV["PROFILE_EXAMPLE_OBJC_APP_FILE"])
    team_id = ENV["PAYJP_ENT_TEAM_ID"]
    app_id = "jp.pay.example-objc"
    provisioning_profile = "payjp-ios-example-objc"
    # Update project settings
    disable_automatic_code_signing(path: sample_xcproj)
    update_project_team(teamid: team_id, path: sample_xcproj)
    update_project_provisioning(profile: ENV["PROFILE_EXAMPLE_OBJC_APP_FILE"], xcodeproj: sample_xcproj)
    update_project_code_signing(uuid: ENV["PROFILE_EXAMPLE_OBJC_APP_UUID"], path: sample_xcproj)
    # sync version number
    version_number = get_version_number(
      xcodeproj: "PAYJP.xcodeproj",
      target: "PAYJP"
    )
    increment_version_number(
      version_number: version_number,
      xcodeproj: sample_xcproj
    )
    # build number from commit number
    increment_build_number(
      build_number: number_of_commits.to_s,
      xcodeproj: sample_xcproj
    )

    # build app
    build_app(
      workspace: "example-objc/example-objc.xcworkspace",
      configuration: "Release",
      scheme: "example-objc",
      clean: true,
      silent: true,
      export_method: 'enterprise',
      export_team_id: team_id
    )

    # distribute
    firebase_app_distribution(
      app: ENV["EXAMPLE_FIREBASE_APP_ID_IOS"],
      groups: "internal-tester",
      release_notes: "git sha: #{last_git_commit[:abbreviated_commit_hash]}"
    )

    slack(
      message: ":bullettrain_side: New SDK app has been updated!",
      success: true
    )
  end

  desc "Build with Package.swift"
  lane :build_swiftpm do
    sh('swift build -v -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk iphonesimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios14.0-simulator"')
  end

  desc "Build carthage-swift example app"
  lane :build_carthage_swift_example do
    sh('cd ../example-swift && ../scripts/carthage-build.sh bootstrap --platform iOS --cache-builds')
    project_file = 'example-swift/example-swift.xcodeproj'
    build_app(
      project: project_file,
      configuration: 'Debug',
      skip_archive: true,
      skip_codesigning: true
    )
  end

  desc "Build cocoapods-objc example app"
  lane :build_cocoapods_objc_example do
    cocoapods(podfile: 'example-objc/Podfile')
    workspace_file = 'example-objc/example-objc.xcworkspace'
    build_app(
      workspace: workspace_file,
      configuration: 'Debug',
      skip_archive: true,
      skip_codesigning: true
    )
  end
end
